{
  "Show Syntax Tree": "",
  "View Hir": "",
  "View Mir": "",
  "Interpret Function": "",
  "View File Text (as seen by the server)": "",
  "Debug ItemTree": "",
  "Shuffle Crate Graph": "",
  "Memory Usage (Clears Database)": "",
  "View Crate Graph": "",
  "View Crate Graph (Full)": "",
  "Expand macro recursively at caret": "",
  "Find matching brace": "",
  "Locate parent module": "",
  "Join lines": "",
  "Run": "",
  "Copy Run Command Line": "",
  "Debug": "",
  "Generate launch configuration": "",
  "Status": "",
  "Reload workspace": "",
  "Rebuild proc macros and build scripts": "",
  "Restart server": "",
  "Start server": "",
  "Stop server": "",
  "Enhanced enter key": "",
  "Structural Search Replace": "",
  "Show RA Version": "",
  "Open Docs": "",
  "Open External Docs": "",
  "Open Cargo.toml": "",
  "Peek Related Tests": "",
  "Move Item Up": "",
  "Move Item Down": "",
  "Cancel running flychecks": "",
  "Run flycheck": "",
  "Clear flycheck diagnostics": "",
  "Reveal File": "",
  "View Memory Layout": "",
  "Toggle Check on Save": "",
  "Custom cargo runner extension ID.": "",
  "Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).": "",
  "Enable logging of VS Code extensions itself.": "",
  "Preferred debug engine.": "",
  "Optional source file mappings passed to the debug engine.": "",
  "Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command.": "",
  "Problem matchers to use for `rust-analyzer.run` command, eg `[\"$rustc\", \"$rust-panic\"]`.": "",
  "Action to run when clicking the extension status bar item.": "",
  "Path to rust-analyzer executable (points to bundled binary by default).": "",
  "Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.": "",
  "Whether to open up the `Debug Panel` on debugging start.": "",
  "Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`": "",
  "Whether to restart the server automatically when certain settings that require a restart are changed.": "",
  "Whether to prefix newlines after comments with the corresponding comment prefix.": "",
  "Whether to show the main part of the rendered rustc output of a diagnostic message.": "",
  "Whether to show diagnostics using the original rustc error code. If this is false, all rustc diagnostics will have the code 'rustc(Click for full compiler diagnostics)'": "",
  "Sets the extension responsible for determining which extension the rust-analyzer extension uses to generate `rust-project.json` files. This should should only be used\n if a build system like Buck or Bazel is also in use.": "",
  "Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.": "",
  "Whether to show error notifications for failing requests.": "",
  "Whether to show the dependencies view.": "",
  "Whether to insert #[must_use] when generating `as_` methods\nfor enum variants.": "",
  "Placeholder expression to use for missing expressions in assists.": "",
  "Warm up caches on project load.": "",
  "How many worker threads to handle priming caches. The default `0` means to pick automatically.": "",
  "Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo/config.toml` changes.": "",
  "Run build scripts (`build.rs`) for more precise code analysis.": "",
  "Specifies the working directory for running build scripts.\n- \"workspace\": run build scripts for a workspace in the workspace's root directory.\n    This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n- \"root\": run build scripts in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set.": "",
  "Specifies the invocation strategy to use when running the build scripts command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set.": "",
  "Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nIf there are multiple linked projects/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.cargo.buildScripts.invocationStrategy#` and\n`#rust-analyzer.cargo.buildScripts.invocationLocation#`.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n.": "",
  "Rerun proc-macros building/build-scripts running when proc-macro\nor build-script sources change and are saved.": "",
  "Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things.": "",
  "List of cfg options to enable with the given values.": "",
  "Extra arguments that are passed to every cargo invocation.": "",
  "Extra environment variables that will be set when running cargo, rustc\nor other commands within the workspace. Useful for setting RUSTFLAGS.": "",
  "List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.": "",
  "Whether to pass `--no-default-features` to cargo.": "",
  "Relative path to the sysroot, or \"discover\" to try to automatically find it via\n\"rustc --print sysroot\".\n\nUnsetting this disables sysroot loading.\n\nThis option does not take effect until rust-analyzer is restarted.": "",
  "Whether to run cargo metadata on the sysroot library allowing rust-analyzer to analyze\nthird-party dependencies of the standard libraries.\n\nThis will cause `cargo` to create a lockfile in your sysroot directory. rust-analyzer\nwill attempt to clean up afterwards, but nevertheless requires the location to be\nwritable to.": "",
  "Relative path to the sysroot library sources. If left unset, this will default to\n`{cargo.sysroot}/lib/rustlib/src/rust/library`.\n\nThis option does not take effect until rust-analyzer is restarted.": "",
  "Compilation target override (target triple).": "",
  "Unsets the implicit `#[cfg(test)]` for the specified crates.": "",
  "Run the check command for diagnostics on save.": "",
  "Check all targets and tests (`--all-targets`).": "",
  "Cargo command to use for `cargo check`.": "",
  "Extra arguments for `cargo check`.": "",
  "Extra environment variables that will be set when running `cargo check`.\nExtends `#rust-analyzer.cargo.extraEnv#`.": "",
  "List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.": "",
  "List of `cargo check` (or other command specified in `check.command`) diagnostics to ignore.\n\nFor example for `cargo check`: `dead_code`, `unused_imports`, `unused_variables`,...": "",
  "Specifies the working directory for running checks.\n- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n    This falls back to \"root\" if `#rust-analyzer.check.invocationStrategy#` is set to `once`.\n- \"root\": run checks in the project's root directory.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set.": "",
  "Specifies the invocation strategy to use when running the check command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set.": "",
  "Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.": "",
  "Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefore include `--message-format=json` or a similar option\n(if your client supports the `colorDiagnosticOutput` experimental\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.check.invocationStrategy#` and\n`#rust-analyzer.check.invocationLocation#`.\n\nIf `$saved_file` is part of the command, rust-analyzer will pass\nthe absolute path of the saved file to the provided command. This is\nintended to be used with non-Cargo build systems.\nNote that `$saved_file` is experimental and may be removed in the futureg.\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.": "",
  "Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n\nCan be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n\nAliased as `\"checkOnSave.targets\"`.": "",
  "Whether `--workspace` should be passed to `cargo check`.\nIf false, `-p <package>` will be passed instead.": "",
  "Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.": "",
  "Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.": "",
  "Whether to add parenthesis and argument snippets when completing function.": "",
  "Whether to show full function/method signatures in completion docs.": "",
  "Maximum number of completions to return. If `None`, the limit is infinite.": "",
  "Whether to show postfix snippets like `dbg`, `if`, `not`, etc.": "",
  "Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.": "",
  "Custom completion snippets.": "",
  "Whether to enable term search based snippets like `Some(foo.bar().baz())`.": "",
  "List of rust-analyzer diagnostics to disable.": "",
  "Whether to show native rust-analyzer diagnostics.": "",
  "Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.": "",
  "Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.": "",
  "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.": "",
  "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.": "",
  "These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.": "",
  "Controls file watching implementation.": "",
  "Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.": "",
  "Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.": "",
  "Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).": "",
  "Enables highlighting of related references while the cursor is on any identifier.": "",
  "Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.": "",
  "Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.": "",
  "Whether to show HoverActions in Rust files.": "",
  "Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.": "",
  "Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.": "",
  "Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.": "",
  "Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.": "",
  "Whether to show documentation on hover.": "",
  "Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set.": "",
  "Use markdown syntax for links on hover.": "",
  "How to render the align information in a memory layout hover.": "",
  "Whether to show memory layout data on hover.": "",
  "How to render the niche information in a memory layout hover.": "",
  "How to render the offset information in a memory layout hover.": "",
  "How to render the size information in a memory layout hover.": "",
  "Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.": "",
  "How imports should be grouped into use statements.": "",
  "Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.": "",
  "Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.": "",
  "Prefer to unconditionally use imports of the core and alloc crate, over the std crate.": "",
  "Whether to prefer import paths containing a `prelude` module.": "",
  "The path structure for newly inserted paths to use.": "",
  "Whether to show inlay type hints for binding modes.": "",
  "Whether to show inlay type hints for method chains.": "",
  "Whether to show inlay hints after a closing `}` to indicate what item it belongs to.": "",
  "Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).": "",
  "Whether to show inlay hints for closure captures.": "",
  "Whether to show inlay type hints for return types of closures.": "",
  "Closure notation in type and chaining inlay hints.": "",
  "Whether to show enum variant discriminant hints.": "",
  "Whether to show inlay hints for type adjustments.": "",
  "Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.": "",
  "Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).": "",
  "Whether to show implicit drop hints.": "",
  "Whether to show inlay type hints for elided lifetimes in function signatures.": "",
  "Whether to prefer using parameter names as the name for elided lifetime hints if possible.": "",
  "Maximum length for inlay hints. Set to null to have an unlimited length.": "",
  "Whether to show function parameter name inlay hints at the call\nsite.": "",
  "Whether to show exclusive range inlay hints.": "",
  "Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.": "",
  "Whether to render leading colons for type hints, and trailing colons for parameter hints.": "",
  "Whether to show inlay type hints for variables.": "",
  "Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.": "",
  "Whether to hide inlay type hints for constructors.": "",
  "Enables the experimental support for interpreting tests.": "",
  "Join lines merges consecutive declaration and initialization of an assignment.": "",
  "Join lines inserts else between consecutive ifs.": "",
  "Join lines removes trailing commas.": "",
  "Join lines unwraps trivial blocks.": "",
  "Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.": "",
  "Whether to show CodeLens in Rust files.": "",
  "Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability.": "",
  "Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.": "",
  "Where to render annotations.": "",
  "Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set.": "",
  "Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.": "",
  "Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.": "",
  "Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.": "",
  "Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.": "",
  "Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.": "",
  "Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.": "",
  "Sets the LRU capacity of the specified queries.": "",
  "Whether to show `can't find Cargo.toml` error message.": "",
  "Whether to send an UnindexedProject notification to the client.": "",
  "How many worker threads in the main loop. The default `null` means to pick automatically.": "",
  "Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.": "",
  "Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.": "",
  "These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.": "",
  "Internal config, path to proc-macro server executable.": "",
  "Exclude imports from find-all-references.": "",
  "Exclude tests from find-all-references.": "",
  "Command to be executed instead of 'cargo' for runnables.": "",
  "Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.": "",
  "Optional path to a rust-analyzer specific target directory.\nThis prevents rust-analyzer's `cargo check` from locking the `Cargo.lock`\nat the expense of duplicating build artifacts.\n\nSet to `true` to use a subdirectory of the existing target directory or\nset to a path relative to the workspace to use that path.": "",
  "Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.": "",
  "Additional arguments to `rustfmt`.": "",
  "Advanced option, fully override the command rust-analyzer uses for\nformatting. This should be the equivalent of `rustfmt` here, and\nnot that of `cargo fmt`. The file contents will be passed on the\nstandard input and the formatted result will be read from the\nstandard output.": "",
  "Enables the use of rustfmt's unstable range formatting command for the\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.": "",
  "Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links.": "",
  "Whether the server is allowed to emit non-standard tokens and modifiers.": "",
  "Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers.": "",
  "Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type.": "",
  "Use semantic tokens for punctuation.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role.": "",
  "When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls.": "",
  "Use specialized semantic tokens for punctuation.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type.": "",
  "Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.": "",
  "Show full signature of the callable. Only shows parameters if disabled.": "",
  "Show documentation.": "",
  "Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list.": "",
  "Workspace symbol search kind.": "",
  "Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.": "",
  "Workspace symbol search scope.": ""
}